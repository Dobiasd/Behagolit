main:None = printLine message

message:String = concat "Hello, world!" (concat "\n" answerSentence)

answerSentence:String = tellFact "answer" theAnswer

theAnswer:String = ifElse True fourtyTwoRepr "No."

tellFact:String name:String value:String = concat "The " (concat name (concat " is: " value))

fourtyTwoRepr:String = intToStr fourtyTwo

fourtyTwo:Integer = + fourteen (+ 15 thirteen)
    thirteen:Integer = fib 7

fib:Integer n:Integer = ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))

fifteen:Integer = - (+ twentySeven two) fourTeen

twentySeven:Integer = + (* 10 (TwoDigitNumber.tens weirdTwentySeven)) (TwoDigitNumber.ones weirdTwentySeven)

two:Integer = 2

TwoDigitNumber := struct tens:Integer ones:Integer

weirdTwentySeven:TwoDigitNumber = TwoDigitNumber 2 7

#tempapply:Integer f:(Integer->Integer) x:Integer = f x
#fourteen:Integer = tempapply square 3

#fourteen:Integer = + (square 3) 5
#fourteen:Integer = 14
fourteen:Integer = sum (map oneTwoThree square)

oneTwoThree:IntList = IntListElem 1 (IntListElem 2 (IntListElem 3 (EmptyList 0)))

IntListElem := struct head:Integer tail:IntList

EmptyList := struct nothing:Integer # todo: support none or empty structs

union IntList = EmptyList | IntListElem

sum:Integer xs:IntList = fold + 0 oneTwoThree

map:IntList xs:IntList f:(Integer->Integer) = ifElse (== xs EmptyList) EmptyList (IntListElem (f (head xs)) (map f (tail xs)))

foldr:Integer f:(Integer->Integer->Integer) acc:Integer xs:IntList = ifElse (== xs EmptyList) acc (f (head xs) (foldr f acc (tail xs)))

square:Integer x:Integer = * x x
